<div class="card shadow mb-4 col-6">
	<div class="card-header py-3">
		<h6 class="m-0 font-weight-bold text-primary">Blue Green Deployment</h6>
	</div>
	<div class="card-body">
		<p>How hard it is for you to upgrade your application with minimal downtime?</p>
		<p>
			This page shows the load balancing between application versions
			based on route mappings. In our basics page we discussed the
			concept of routes and how they can be mapped to many application
			deployments. <a data-toggle="collapse" data-parent="#accordion"
			                href="#collapseOne">Learn more - Description</a>
		</p>
		<div id="bluegreenBlock"></div>
		<div  id="donut-example"></div>
		<hr/>
		<div class="float-right">
		
			<a id="resetButton" href="javascript:reset();" class="btn btn-primary">Reset</a> 
			<a id="loadButton" href="javascript:toggleTimer();" class="btn btn-primary">Start Simulation</a>
		</div>
	</div>
	
</div>


<script>

var INTERVAL = 1000;
var timerID = 0;
var versions = {};

var colors = [ "#90A6D4", "#90D49C" ];

function reset() {
	for (var version in versions) {
		versions[version] = 0;
	}
}

function toggleTimer() {
	if (timerID == 0) {
		startTimer();
		$('#loadButton').text("Stop Simulation");
		$('#resetButton').hide();
	} else {
		stopTimer();
		$('#loadButton').text("Start Simulation");
		$('#resetButton').show();
	}
}

var chartData = [ {
	label : "blue",
	value : 10
}, {
	label : "green",
	value : 1
} ]

var chart = Morris.Donut({
	element : 'donut-example',
	colors : colors,
	data : chartData,
	resize : true
});

function startTimer() {
	timerID = setInterval(startLoad, INTERVAL);
}

function stopTimer() {
	if (timerID) {
		clearInterval(timerID);
		timerID = 0;
	}
}

function startLoad() {

	$.get("/bluegreen-check", function(appEnv) {

		var appName = appEnv[0]

		if (appName in versions) {
			versions[appName] = 1 + versions[appName];
		} else {
			versions[appName] = 1;
		}

		var html = '';

		chartData = [];

		// MMB: This can be templated instead of creating HTML in the function
		var i = 2;
		for ( var version in versions) {
			html += '<p><b><span style="color:' + colors[i % 2] + '">'
					+ version + '</span></b> - ' + versions[version]
					+ '</p>'

			i++;

			item = {};
			item.label = version;
			item.value = versions[version];
			chartData.push(item);
		}

		chart.setData(chartData);

		$('#bluegreenBlock').html(html);
	});

}
</script>
